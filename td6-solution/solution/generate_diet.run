#!/usr/bin/env ampl
option randseed 0;

## generate_diet.run

param myZero := 1e-9;

param n integer > 0;
param m integer > 0;
set N := 1..n;
set M := 1..m;

data generate_diet.dat;

param c{N} default 0;
param A{M,N} default 0;
param b{M} default 0;
param xv{N} >= 0;

param s := 0.1;
param bperturb := 0.9;

let {j in N} c[j] := max(0, 1 + 0.1*Normal(0,1));
let {j in N} xv[j] := round(10*Uniform(1,2))/10;
let {i in M, j in N} A[i,j] := if Uniform(0,1) <= s then round(100*Uniform(1,2))/100 else 0;
let {i in M} b[i] := sum{j in N} A[i,j]*xv[j];
# we perturb b since otherwise Ax=b is a rank-deficient system
let {i in M} b[i] := Uniform(bperturb*b[i], b[i]);

printf "# diet.dat instance generated by generate_diet.run\n" > diet.dat;
printf "param m := %d;\n", m >> diet.dat;
printf "param n := %d;\n", n >> diet.dat;
printf "param c :=\n" >> diet.dat;
for {j in N : abs(c[j]) > myZero} {
  printf "  %d  %g\n", j, c[j] >> diet.dat;
}
printf ";\n" >> diet.dat;
printf "param b :=\n" >> diet.dat;
for {i in M : abs(b[i]) > myZero} {
  printf "  %d  %.9g\n", i, b[i] >> diet.dat;
}
printf ";\n" >> diet.dat;
printf "param A :=\n" >> diet.dat;
for {i in M, j in N : abs(A[i,j]) > myZero} {
  printf "  %d %d  %g\n", i,j, A[i,j] >> diet.dat;
}
printf ";\n" >> diet.dat;

