# instance generator for knapsack

option randseed 0;

## start from sizes/index sets/params of original problem
param n integer, > 0;
set N := 1..n;
param c{N} integer;
param w{N} integer;
param K integer, >= 0;

## randomly generate missing index sets/params
let n := 20; # initialize number of objects

# uniform dist
param cL := 1; # lower bound for object volume
param cU := 10; # upper bound for object volume
param wL := 1; # lower bound for object value
param wU := 10; # upper bound for objec value
let {i in N} c[i] := round(Uniform(cL,cU));
let {i in N} w[i] := round(Uniform(wL,wU));

# normal dist
param cavg := 4.5; param cstdev := 1.9; # object volume
param wavg := 5.8; param wstdev := 3.1; # object value
let {i in N} c[i] := round(Normal(cavg,cstdev));
let {i in N} w[i] := round(Normal(wavg,wstdev));

# propose a meaningful K
let K := round((sum{i in N} c[i])/2);

## print out a .dat file (MIND YOU DON'T OVERWRITE OLD .dat FILES!)
print "# file generated by knapsack-instgen.run" > rndknap.dat;
printf "param n := %d;\n", n >> rndknap.dat;
printf "param K := %d;\n", K >> rndknap.dat;
printf "param : c w :=\n" >> rndknap.dat;
for {i in N} {
  printf " %i  %d %d\n", i, c[i], w[i] >> rndknap.dat;
}
printf ";\n" >> rndknap.dat;
