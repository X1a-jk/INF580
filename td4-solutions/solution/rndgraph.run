#!/usr/bin/env ampl

## generate a biconnected random Erdos-Renyi graph

option randseed 0;

## graph generation parameters
param n := 50;
# vertices
set V := 1..n;
# edges
set E within {V,V};
# graph weights
param c{E} default 0;
param I{E} default 1; # dummy flag

## generate a biconnected Erdos-Renyi random graph
param p := 0.1;
# graph is initially empty
let E := {}; 
# we add a Hamiltonian cycle
for {u in V : u < n} {
  let E := E union {(u,u+1)};
  let c[u,u+1] := Uniform01();
}
let E := E union {(1,n)};
let c[1,n] := Uniform01();

# now some random edges
for{u in V, v in V : u < v and Uniform01() < p} {
  let E := E union {(u,v)};
  let c[u,v] := Uniform01();
}

## output
printf "# DGP instance generated by rndgraph.run\n" > rndgph.dat;
printf "param Kdim := 3;\n" >> rndgph.dat;
printf "param n := %d;\n", n >> rndgph.dat;
printf "param : E : c I :=\n" >> rndgph.dat;
for {(u,v) in E} {
  printf " %d %d  %.5f %d\n", u,v, c[u,v], I[u,v] >> rndgph.dat;
}
printf ";\n" >> rndgph.dat;

print "rndgraph: graph output to rndgph.dat";
